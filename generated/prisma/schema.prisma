// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  name           String?
  avatar         String?
  password       String
  isActive       Boolean          @default(true)
  lastLogin      DateTime?
  subjects       Subject[]
  questions      Question[]
  questionImages QuestionImage[]
  reviews        QuestionReview[]
  tasks          Task[]
  categories     Category[]
  settings       UserSettings?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([categoryId])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([name, userId])
  @@index([userId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

// Subject represents academic subjects like math, physics, etc.
model Subject {
  id          String     @id @default(uuid())
  name        String
  description String?
  color       String?
  icon        String?
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([userId])
}

// Question model for error questions
model Question {
  id         String           @id @default(uuid())
  text       String
  answer     String?
  difficulty String?          @default("MEDIUM") // EASY, MEDIUM, HARD
  status     String           @default("PENDING") // PENDING, SOLVED, SKIPPED, REVIEWED
  notes      String?
  subjectId  String
  subject    Subject          @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  userId     String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  images     QuestionImage[]
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  reviews    QuestionReview[]

  @@index([userId])
  @@index([subjectId])
}

// QuestionImage model for storing images related to questions
model QuestionImage {
  id               String    @id @default(uuid())
  url              String
  localPath        String?
  textContent      String?
  analyzedContent  String?
  processingStatus String    @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED, ANALYZING
  userId           String
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId       String?
  question         Question? @relation(fields: [questionId], references: [id], onDelete: SetNull)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([userId])
  @@index([questionId])
}

// New model for tracking spaced repetition reviews
model QuestionReview {
  id             String   @id @default(uuid())
  questionId     String
  userId         String
  difficulty     String // "again", "hard", "good", "easy"
  interval       Int // Days until next review
  easeFactor     Float // Ease factor for SM-2 algorithm
  reviewCount    Int // Number of times reviewed
  nextReviewDate DateTime // When to review next
  createdAt      DateTime @default(now())

  // Relations
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([questionId])
  @@index([nextReviewDate])
  @@index([createdAt])
}

// UserSettings model for user preferences
model UserSettings {
  id        String   @id @default(uuid())
  userId    String   @unique
  dailyGoal Int      @default(10)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
